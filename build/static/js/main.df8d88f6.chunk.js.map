{"version":3,"sources":["header.js","main_list.js","App.js","serviceWorker.js","index.js"],"names":["AppHeader","onInputChange","e","props","onInputValueChange","target","value","onBtnClick","addInputValueOnClick","toDoItem","this","initialValue","style","width","className","TextField","id","label","onChange","Button","marginLeft","size","variant","color","onClick","React","Component","useStyles","makeStyles","theme","root","maxWidth","backgroundColor","palette","background","paper","listItem","display","justifyContent","marginTop","AppMain","classes","deleteToDoItem","index","deleteToDoItemFromList","listArr","List","dense","map","labelId","ListItem","key","button","ListItemText","primary","ListItemSecondaryAction","Checkbox","edge","event","i","text","parentElement","closest","previousSibling","firstChild","checked","textDecoration","handleToggle","bind","styles","childContainer","wrapper","flexDirection","alignItems","App","getInputValue","setState","currentToDo","deleteItemField","list","state","splice","localStorage","setItem","JSON","stringify","addInputValue","push","getItem","parse","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.df8d88f6.chunk.js","sourcesContent":["import React from 'react';\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport \"./App.css\";\n\nclass AppHeader extends React.Component {\n    onInputChange = (e) => {\n        this.props.onInputValueChange(e.target.value);\n\n    };\n\n    onBtnClick = () => this.props.addInputValueOnClick();\n\n    render() {\n        let toDoItem = this.props.initialValue;\n        const btnStyle = {\n            marginLeft: \"1rem\",\n        };\n        return (\n\n            <div style={{width:\"100%\"}}>\n                <div className=\"App\">\n                    <TextField\n                        id=\"new_to_do\"\n                        label=\"New to do\"\n                        value={toDoItem}\n                        style={{width: \"90%\"}}\n                        onChange={this.onInputChange}\n                    />\n                    <Button\n                        style={btnStyle}\n                        size=\"large\"\n                        variant=\"outlined\"\n                        color=\"primary\"\n                        onClick={this.onBtnClick}\n                    >\n                        Add\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default AppHeader;\n","import React from 'react';\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Button from \"@material-ui/core/Button\";\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        maxWidth: 500,\n        width: \"100%\",\n        backgroundColor: theme.palette.background.paper,\n    },\n    listItem: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        backgroundColor: \"#ccc\",\n        marginTop: \".5rem\",\n    }\n}));\n\nfunction AppMain(props) {\n\n    const classes = useStyles();\n\n    const handleToggle = (e, i) => {\n        const checkSpan = e.target.parentElement;\n        const text = checkSpan.parentElement.closest(\"div\").previousSibling.firstChild.firstChild;\n\n        if(e.target.checked){\n            text.style.textDecoration = \"line-through\";\n        }else{\n            text.style.textDecoration = \"none\";\n        }\n    };\n\n    const deleteToDoItem = index => props.deleteToDoItemFromList(index);\n    const listArr = props.listArr;\n\n    return (\n        <List dense className={classes.root}>\n            {listArr.map((listItem, index ) => {\n                const labelId = `checkbox-list-label-${index}`;\n                return (\n                    <ListItem\n                        className={classes.listItem}\n                        key={index}\n                        button>\n                        <ListItemText id={labelId} primary={`${index + 1}. ${listItem}`} />\n                        <ListItemSecondaryAction>\n                            <Checkbox\n                                color=\"primary\"\n                                edge=\"end\"\n                                onChange={event => handleToggle(event, index)}\n                            />\n                            <Button\n                                onClick={deleteToDoItem.bind(this, index)}\n                            >\n                                <DeleteIcon />\n                            </Button>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                );\n            })}\n        </List>\n    );\n}\n\nexport default AppMain;\n","import React from 'react';\nimport AppHeader from \"./header\";\nimport AppMain from \"./main_list\";\n\nconst styles = {\n   childContainer: {\n       maxWidth: 500,\n       width: \"100%\",\n   },\n    wrapper: {\n       display: \"flex\",\n        flexDirection: \"row\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        maxWidth: 500,\n        width: \"100%\",\n    }\n};\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentToDo: \"\",\n            list: [\n\n            ]\n        }\n    }\n\n    componentDidMount() {\n        let list = localStorage.getItem(\"listOfItems\")\n        this.setState({\n            list: JSON.parse(list),\n        })\n\n    }\n\n    getInputValue = (e) => {\n        this.setState({\n            currentToDo: e\n        });\n\n    };\n\n    deleteItemField = (index) => {\n        const list = this.state.list;\n        list.splice(index, 1);\n        localStorage.setItem(\"listOfItems\", JSON.stringify(list) || [])\n        this.setState({\n            list: list,\n        })\n    }\n\n    addInputValue = () => {\n        const list = this.state.list;\n        list.push(this.state.currentToDo);\n        localStorage.setItem(\"listOfItems\", JSON.stringify(list) || []);\n        this.setState({\n            list:list,\n            currentToDo: \"\"\n        });\n\n    };\n\n    render() {\n        return (\n            <React.Fragment>\n                <div style={styles.wrapper}>\n                    <AppHeader\n                        onInputValueChange = {this.getInputValue}\n                        addInputValueOnClick = {this.addInputValue}\n                        initialValue={this.state.currentToDo}\n                    />\n                </div>\n                <div style={styles.childContainer}>\n                    <AppMain\n                        deleteToDoItemFromList = {this.deleteItemField}\n                        listArr={this.state.list}/>\n                </div>\n            </React.Fragment>\n        );\n    }\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}